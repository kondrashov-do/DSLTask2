package RoboRoute.sandbox;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Color;
import java.awt.Dimension;

public class RoboRoute extends JFrame {
  private static final int CANVAS_SIZE = 1000;

  private static final int DEFAULT_DIRECTION = 0;
  private int boundaryMinX = 10;
  private int boundaryMinY = 10;
  private int boundaryMaxX = 500;
  private int boundaryMaxY = 500;

  private JPanel panel = new JPanel() {
    @Override
    protected void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);
      Point currentStartPoint = new Point(17, 17);
      int direction = DEFAULT_DIRECTION;

      boundaryMinX = 10;
      boundaryMaxX = 500;
      boundaryMinY = 10;
      boundaryMaxY = 500;

      graphics.drawRect(10, 10, 500, 500);
      graphics.drawOval(15, 15, 4, 4);
      currentStartPoint = moveForward(currentStartPoint, direction, 50, graphics);
    }
  };

  public Point moveForward(Point currPoint, int currDirection, int distance, Graphics graphics) {
    Point endPoint = new Point();
    // move right 
    if (currDirection == 0) {
      endPoint.x = currPoint.x + distance;
      endPoint.y = currPoint.y;
    }
    // move left 
    if (currDirection == 1) {
      endPoint.x = currPoint.x - distance;
      endPoint.y = currPoint.y;
    }
    // move up 
    if (currDirection == 2) {
      endPoint.x = currPoint.x;
      endPoint.y = currPoint.y - distance;
    }
    // move down 
    if (currDirection == 3) {
      endPoint.x = currPoint.x;
      endPoint.y = currPoint.y + distance;
    }
    // Error Message Out of Bounds 
    if (endPoint.x <= boundaryMinX || endPoint.x >= boundaryMaxX || endPoint.y <= boundaryMinY || endPoint.y >= boundaryMaxY) {
      endPoint = currPoint;
      graphics.setColor(Color.RED);
      graphics.drawString("Out of boundaries", (boundaryMinX + boundaryMaxY) / 2, (boundaryMinY + boundaryMaxY) / 2);
      System.out.println("Out of boundaries");
    }

    graphics.setColor(Color.BLACK);
    graphics.drawLine(currPoint.x, currPoint.y, endPoint.x, endPoint.y);
    return endPoint;
  }

  public int changeDirection(int turn) {
    return turn;
  }

  public static void main(String[] args) {
    RoboRoute canvas = new RoboRoute();
    canvas.initialize();
  }

  public void executeCommands() {
  }

  public void initialize() {
    this.setTitle("RoboRoute");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(panel);
    panel.setPreferredSize(new Dimension(CANVAS_SIZE, CANVAS_SIZE));
    this.pack();
    this.setVisible(true);
  }
}
