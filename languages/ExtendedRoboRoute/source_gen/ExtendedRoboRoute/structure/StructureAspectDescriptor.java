package ExtendedRoboRoute.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptCanvasWithVariables = createDescriptorForCanvasWithVariables();
  /*package*/ final ConceptDescriptor myConceptForwardWithVariables = createDescriptorForForwardWithVariables();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptCanvasWithVariables.getId(), 0);
    myIndexMap.put(myConceptForwardWithVariables.getId(), 1);
    myIndexMap.put(myConceptVariable.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCanvasWithVariables, myConceptForwardWithVariables, myConceptVariable);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptCanvasWithVariables;
      case 1:
        return myConceptForwardWithVariables;
      case 2:
        return myConceptVariable;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForCanvasWithVariables() {
    return new ConceptDescriptorBuilder("ExtendedRoboRoute.structure.CanvasWithVariables", MetaIdFactory.conceptId(0x5932703a14ff46bdL, 0xa9cfc081255d1355L, 0x21447d0d743f1e79L)).super_("RoboRoute.structure.Canvas").version(1).super_(MetaIdFactory.conceptId(0x53cf39915e0c480eL, 0x86915523d5520502L, 0x21447d0d74116df9L)).parents("RoboRoute.structure.Canvas").parentIds(MetaIdFactory.conceptId(0x53cf39915e0c480eL, 0x86915523d5520502L, 0x21447d0d74116df9L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x21447d0d7447ced8L, "variables", MetaIdFactory.conceptId(0x5932703a14ff46bdL, 0xa9cfc081255d1355L, 0x21447d0d7447cdafL), true, true, false, new SNodePointer("r:49156d61-fa18-43e6-b5b6-cb7e06493b7b(ExtendedRoboRoute.structure)", "2397178398406856408"))).children(new String[]{"variables"}, new boolean[]{true}).rootable().sourceNode(new SNodePointer("r:49156d61-fa18-43e6-b5b6-cb7e06493b7b(ExtendedRoboRoute.structure)", "2397178398406286969")).create();
  }
  private static ConceptDescriptor createDescriptorForForwardWithVariables() {
    return new ConceptDescriptorBuilder("ExtendedRoboRoute.structure.ForwardWithVariables", MetaIdFactory.conceptId(0x5932703a14ff46bdL, 0xa9cfc081255d1355L, 0x21447d0d744753d8L)).super_("RoboRoute.structure.Command").version(1).super_(MetaIdFactory.conceptId(0x53cf39915e0c480eL, 0x86915523d5520502L, 0x21447d0d74255bfcL)).parents("RoboRoute.structure.Command").parentIds(MetaIdFactory.conceptId(0x53cf39915e0c480eL, 0x86915523d5520502L, 0x21447d0d74255bfcL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x21447d0d744b8b2aL, "length", MetaIdFactory.conceptId(0x5932703a14ff46bdL, 0xa9cfc081255d1355L, 0x21447d0d7447cdafL), false, new SNodePointer("r:49156d61-fa18-43e6-b5b6-cb7e06493b7b(ExtendedRoboRoute.structure)", "2397178398407101226"))).references("length").alias("move on ", "").sourceNode(new SNodePointer("r:49156d61-fa18-43e6-b5b6-cb7e06493b7b(ExtendedRoboRoute.structure)", "2397178398406824920")).create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    return new ConceptDescriptorBuilder("ExtendedRoboRoute.structure.Variable", MetaIdFactory.conceptId(0x5932703a14ff46bdL, 0xa9cfc081255d1355L, 0x21447d0d7447cdafL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x21447d0d7447ce30L, "value", new SNodePointer("r:49156d61-fa18-43e6-b5b6-cb7e06493b7b(ExtendedRoboRoute.structure)", "2397178398406856240"))).properties("value").alias("variable", "").sourceNode(new SNodePointer("r:49156d61-fa18-43e6-b5b6-cb7e06493b7b(ExtendedRoboRoute.structure)", "2397178398406856111")).create();
  }
}
